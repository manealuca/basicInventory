@using Entitys
@using Business

@inject NavigationManager NavManaget


<div class="form-group">
    <select class="form-control" @onchange="OnChangedWhareHouse">
        <option value="">Seleccione una bodega</option>
        @foreach(var whareHouse in whareHouses)
        {
            <option value="@whareHouse.WhareHouseId">@whareHouse.WhareHouseName</option>
        }
    </select>
</div>

<hr/>
<EditForm Model="oInOut">
    <div class="form-group">
        <InputSelect class="form-control" @bind-Value="oInOut.StorageId">
            <option value="">Seleccione un Producto</option>
            @foreach(var storage in storages)
            {
                <option value="@storage.StorageId">@storage.Product.ProductName</option>
            }
        </InputSelect>
    </div>
    <div clas="form-group">
        <InputNumber class="form-control" @bind-Value="oInOut.Quantity" />
    </div>
    <div clas="form-group">
        <label> Es una entrada?</label>
        <InputCheckbox class="form-check" @bind-Value="oInOut.IsInput" />
    </div>
    <input class="form-control" type="button" value="@buttonValue" @onclick="SaveInOut"/>
</EditForm>

<div class="text-center h4">
    @message
</div>

@code {
    InputOuputEntity oInOut = new InputOuputEntity();
    List <StorageEntity> storages = new List<StorageEntity>();
    List <WhareHouseEntity> whareHouses = new List<WhareHouseEntity>();
    ProductEntity oProduct = new ProductEntity();
    StorageEntity oStorage = new StorageEntity();

    string message = "";
    string buttonValue => oInOut.IsInput ? "Registrar Entrada" : "Registrar Salida";

    protected override async Task OnInitializedAsync()
    {
        whareHouses = B_WhareHouse.WhareHouseList();

    }
    private void OnChangedWhareHouse(ChangeEventArgs e)
    {
        var idWhareHouse = e.Value.ToString();
        storages = B_Storage.storagesProductsByWhareHouse(idWhareHouse);
    }

    private void SaveInOut()
    {
        oStorage = storages.LastOrDefault(s => s.StorageId == oInOut.StorageId);
        oProduct = oStorage.Product;

        if(oInOut.IsInput){
            oStorage.PartialQuantity = oStorage.PartialQuantity + oInOut.Quantity;
            B_Storage.updateStorage(oStorage);
            oProduct.TotaltQuantity = oProduct.TotaltQuantity + oInOut.Quantity;
            B_Product.updateProduct(oProduct);
            message = $"El producto {oProduct.ProductName} ah sido correctamente actualizado";

        }else{
            if(IsBiggerThanZero(oInOut.Quantity, oStorage.PartialQuantity)){
                B_Storage.updateStorage(oStorage);
                oProduct.TotaltQuantity = oProduct.TotaltQuantity + oInOut.Quantity;
                B_Product.updateProduct(oProduct);
                message = $"El producto {oProduct.ProductName} ah sido correctamente actualizado";
            }
            else
            {
                message = $"No existe la cantidad suficiente en bodega para el producto {oProduct.ProductName}";
            }
        }
    }
    private bool IsBiggerThanZero(int quantity, int storageQuantity) {
        if (storageQuantity>quantity) {
            return true;
        }
        return false;
    }


}
